// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type categoryTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *categoryTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("news_categories").
func (v *categoryTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *categoryTableType) Columns() []string {
	return []string{
		"id",
		"news_id",
		"category_id",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *categoryTableType) NewStruct() reform.Struct {
	return new(Category)
}

// NewRecord makes a new record for that table.
func (v *categoryTableType) NewRecord() reform.Record {
	return new(Category)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *categoryTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CategoryTable represents news_categories view or table in SQL database.
var CategoryTable = &categoryTableType{
	s: parse.StructInfo{
		Type:    "Category",
		SQLName: "news_categories",
		Fields: []parse.FieldInfo{
			{Name: "Id", Type: "int64", Column: "id"},
			{Name: "NewsId", Type: "int64", Column: "news_id"},
			{Name: "CategoryId", Type: "int64", Column: "category_id"},
		},
		PKFieldIndex: 0,
	},
	z: new(Category).Values(),
}

// String returns a string representation of this struct or record.
func (s Category) String() string {
	res := make([]string, 3)
	res[0] = "Id: " + reform.Inspect(s.Id, true)
	res[1] = "NewsId: " + reform.Inspect(s.NewsId, true)
	res[2] = "CategoryId: " + reform.Inspect(s.CategoryId, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Category) Values() []interface{} {
	return []interface{}{
		s.Id,
		s.NewsId,
		s.CategoryId,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Category) Pointers() []interface{} {
	return []interface{}{
		&s.Id,
		&s.NewsId,
		&s.CategoryId,
	}
}

// View returns View object for that struct.
func (s *Category) View() reform.View {
	return CategoryTable
}

// Table returns Table object for that record.
func (s *Category) Table() reform.Table {
	return CategoryTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Category) PKValue() interface{} {
	return s.Id
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Category) PKPointer() interface{} {
	return &s.Id
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Category) HasPK() bool {
	return s.Id != CategoryTable.z[CategoryTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.Id = pk.
func (s *Category) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = CategoryTable
	_ reform.Struct = (*Category)(nil)
	_ reform.Table  = CategoryTable
	_ reform.Record = (*Category)(nil)
	_ fmt.Stringer  = (*Category)(nil)
)

func init() {
	parse.AssertUpToDate(&CategoryTable.s, new(Category))
}
